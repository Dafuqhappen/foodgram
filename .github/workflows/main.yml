name: Foodgram CI/CD

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  tests:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: foodgram
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    steps:
      - uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"

      - name: Install backend deps
        run: |
          python -m pip install --upgrade pip
          pip install -r backend/requirements.txt

      - name: Lint (flake8)
        run: python -m flake8 backend/

  build_and_push_to_docker_hub:
    runs-on: ubuntu-latest
    needs: tests
    if: github.ref == 'refs/heads/main'
    steps:
      - uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build & push backend (linux/amd64)
        uses: docker/build-push-action@v5
        with:
          context: ./backend
          push: true
          platforms: linux/amd64
          tags: ${{ secrets.DOCKER_USERNAME }}/foodgram_backend:latest

      - name: Build & push frontend (linux/amd64)
        uses: docker/build-push-action@v5
        with:
          context: ./frontend
          push: true
          platforms: linux/amd64
          tags: ${{ secrets.DOCKER_USERNAME }}/foodgram_frontend:latest

  copy_files_to_server:
    runs-on: ubuntu-latest
    needs: build_and_push_to_docker_hub
    steps:
      - uses: actions/checkout@v3

      - name: Copy docker-compose.production.yml
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USER }}
          key: ${{ secrets.SSH_KEY }}
          source: "infra/docker-compose.production.yml"
          target: "foodgram"
          overwrite: true

      - name: Copy nginx.conf
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USER }}
          key: ${{ secrets.SSH_KEY }}
          source: "infra/nginx.conf"
          target: "foodgram"
          overwrite: true

      - name: Copy data/ via SCP
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USER }}
          key: ${{ secrets.SSH_KEY }}
          source: "backend/fixtures.json"
          target: "foodgram"
          overwrite: true

  deploy:
  runs-on: ubuntu-latest
  needs: [build_and_push_to_docker_hub, copy_files_to_server]
  if: github.ref == 'refs/heads/main'
  steps:
    - name: Deploy over SSH
      uses: appleboy/ssh-action@master
      with:
        host: ${{ secrets.HOST }}
        username: ${{ secrets.USER }}
        key: ${{ secrets.SSH_KEY }}
        script: |
          set -e
          cd ~/foodgram

          echo "== compose down/pull/up =="
          sudo docker compose -f docker-compose.production.yml down --remove-orphans || true
          sudo docker compose -f docker-compose.production.yml pull
          sudo docker compose -f docker-compose.production.yml up -d
          sleep 8

          echo "== migrate =="
          sudo docker compose -f docker-compose.production.yml exec -T backend \
            python manage.py migrate --noinput

          echo "== import ingredients =="
          sudo docker compose -f docker-compose.production.yml exec -T backend \
            python manage.py import_ingredients || true

          echo "== collectstatic =="
          sudo docker compose -f docker-compose.production.yml exec -T backend \
            python manage.py collectstatic --noinput

          echo "== ensure frontend build copied to volume (если есть) =="
          sudo docker compose -f docker-compose.production.yml run --rm frontend \
            sh -lc 'if [ -d /app/build ] && [ "$(ls -A /app/build 2>/dev/null)" ]; then rm -rf /app/result_build/* && cp -r /app/build/* /app/result_build/; else echo "no /app/build — skip"; fi' || true

          echo "== optional demo data (review) =="
          sudo docker compose -f docker-compose.production.yml exec -T backend \
            python manage.py setup_review || true

          echo "== nginx reload =="
          sudo docker compose -f docker-compose.production.yml exec -T nginx nginx -t
          sudo docker compose -f docker-compose.production.yml exec -T nginx nginx -s reload || true
          
  notify:
    runs-on: ubuntu-latest
    needs: deploy
    steps:
      - name: Telegram notify
        uses: appleboy/telegram-action@master
        with:
          to: ${{ secrets.TELEGRAM_TO }}
          token: ${{ secrets.TELEGRAM_TOKEN }}
          message: "✅ Foodgram: деплой успешно завершён"