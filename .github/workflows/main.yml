name: Foodgram CI/CD

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
    
jobs:
  tests:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: foodgram
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - uses: actions/checkout@v3
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: 3.11
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r backend/requirements.txt
    - name: Test with flake8
      run: |
        python -m flake8 backend/

  build_and_push_to_docker_hub:
    name: Push Docker image to Docker Hub
    runs-on: ubuntu-latest
    needs: tests
    if: github.ref == 'refs/heads/main'
    steps:
    - uses: actions/checkout@v3
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2
    - name: Login to Docker
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
    - name: Push backend to Docker Hub
      uses: docker/build-push-action@v4
      with:
        context: ./backend
        push: true
        tags: ${{ secrets.DOCKER_USERNAME }}/foodgram_backend:latest
    - name: Push frontend to Docker Hub
      uses: docker/build-push-action@v4
      with:
        context: ./frontend
        push: true
        tags: ${{ secrets.DOCKER_USERNAME }}/foodgram_frontend:latest

  copy_files_to_server:
    name: Copy project files
    runs-on: ubuntu-latest
    needs: build_and_push_to_docker_hub
    steps:
    - uses: actions/checkout@v3
    
    - name: Install rsync
      run: sudo apt-get update && sudo apt-get install -y rsync

    - name: Setup SSH with passphrase
      run: |
        mkdir -p ~/.ssh
        # Сохраняем ключ с правильными переносами строк
        echo "${{ secrets.SSH_KEY }}" | tr -d '\r' | sed 's/\\n/\n/g' > ~/.ssh/deploy_key
        chmod 600 ~/.ssh/deploy_key
        
        # Запускаем ssh-agent и добавляем ключ с passphrase
        eval "$(ssh-agent -s)"
        echo "${{ secrets.SSH_PASSPHRASE }}" | ssh-add ~/.ssh/deploy_key
        
        # Проверка подключения
        echo "=== SSH connection test ==="
        ssh -T -o StrictHostKeyChecking=no ${{ secrets.USER }}@${{ secrets.HOST }} "echo 'SSH test successful'"

    - name: Copy infra files
      run: |
        rsync -avz --progress -e "ssh -o StrictHostKeyChecking=no" \
          infra/ ${{ secrets.USER }}@${{ secrets.HOST }}:foodgram/

  deploy:
    runs-on: ubuntu-latest
    needs: [build_and_push_to_docker_hub, copy_files_to_server]
    if: github.ref == 'refs/heads/main'
    steps:
    - name: Setup SSH
      run: |
        mkdir -p ~/.ssh
        echo "${{ secrets.SSH_KEY }}" | tr -d '\r' | sed 's/\\n/\n/g' > ~/.ssh/deploy_key
        chmod 600 ~/.ssh/deploy_key
        eval "$(ssh-agent -s)"
        echo "${{ secrets.SSH_PASSPHRASE }}" | ssh-add ~/.ssh/deploy_key

    - name: Execute deploy commands
      run: |
        ssh -o StrictHostKeyChecking=no ${{ secrets.USER }}@${{ secrets.HOST }} "
          cd foodgram
          sudo docker-compose -f infra/docker-compose.production.yml down
          sudo docker-compose -f infra/docker-compose.production.yml pull
          sudo docker-compose -f infra/docker-compose.production.yml up -d
          sleep 10
          sudo docker-compose -f infra/docker-compose.production.yml exec -T backend python manage.py migrate
          sudo docker-compose -f infra/docker-compose.production.yml exec -T backend python manage.py collectstatic --noinput
          if [ -f infra/fixtures.json ]; then
            sudo docker-compose -f infra/docker-compose.production.yml exec -T backend python manage.py loaddata infra/fixtures.json
          fi
        "

  send_message:
    runs-on: ubuntu-latest
    needs: deploy
    steps:
    - name: send message
      uses: appleboy/telegram-action@master
      with:
        to: ${{ secrets.TELEGRAM_TO }}
        token: ${{ secrets.TELEGRAM_TOKEN }}
        message: Деплой проекта foodgram успешно выполнен!
