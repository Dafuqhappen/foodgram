name: Foodgram CI/CD

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  tests:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: foodgram
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    steps:
      - uses: actions/checkout@v3
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: 3.11
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r backend/requirements.txt
      - name: Test with flake8
        run: python -m flake8 backend/

  build_and_push_to_docker_hub:
    name: Push Docker image to Docker Hub
    runs-on: ubuntu-latest
    needs: tests
    if: github.ref == 'refs/heads/main'
    steps:
      - uses: actions/checkout@v3
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      - name: Login to Docker
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      - name: Push backend to Docker Hub
        uses: docker/build-push-action@v4
        with:
          context: ./backend
          push: true
          tags: ${{ secrets.DOCKER_USERNAME }}/foodgram_backend:latest
      - name: Push frontend to Docker Hub
        uses: docker/build-push-action@v4
        with:
          context: ./frontend
          push: true
          tags: ${{ secrets.DOCKER_USERNAME }}/foodgram_frontend:latest

  copy_files_to_server:
    name: Copy project files
    runs-on: ubuntu-latest
    needs: build_and_push_to_docker_hub
    steps:
      - uses: actions/checkout@v3

      - name: Copy docker-compose.production.yml via SCP
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USER }}
          key: ${{ secrets.SSH_KEY }}
          # passphrase: ${{ secrets.SSH_PASSPHRASE }}
          source: "infra/docker-compose.production.yml"
          target: "foodgram"
          overwrite: true

      - name: Copy nginx.conf via SCP
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USER }}
          key: ${{ secrets.SSH_KEY }}
          # passphrase: ${{ secrets.SSH_PASSPHRASE }}
          source: "infra/nginx.conf"
          target: "foodgram"
          overwrite: true

  deploy:
    runs-on: ubuntu-latest
    needs: [build_and_push_to_docker_hub, copy_files_to_server]
    steps:
      - name: Execute deploy commands
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USER }}
          key: ${{ secrets.SSH_KEY }}
          # passphrase: ${{ secrets.SSH_PASSPHRASE }}
          script: |
            cd foodgram
            if [ ! -f docker-compose.production.yml ]; then
              echo "Error: docker-compose.production.yml not found!"
              exit 1
            fi
            if [ ! -f nginx.conf ]; then
              echo "Error: nginx.conf not found!"
              exit 1
            fi
            echo "=== Проверка файлов ==="
            ls -la
            sudo docker system prune -af
            sudo docker compose -f docker-compose.production.yml down --remove-orphans
            sudo docker rm -f foodgram-db foodgram-backend foodgram-front foodgram-proxy 2>/dev/null || true
            sudo docker compose -f docker-compose.production.yml pull
            sudo docker compose -f docker-compose.production.yml up -d
            sleep 10
            sudo docker compose -f docker-compose.production.yml exec -T backend python manage.py migrate
            sudo docker compose -f docker-compose.production.yml exec -T backend python manage.py collectstatic --noinput
            sudo docker compose -f docker-compose.production.yml exec -T backend python manage.py setup_review

  send_message:
    runs-on: ubuntu-latest
    needs: deploy
    steps:
      - name: send message
        uses: appleboy/telegram-action@master
        with:
          to: ${{ secrets.TELEGRAM_TO }}
          token: ${{ secrets.TELEGRAM_TOKEN }}
          message: Деплой проекта foodgram успешно выполнен!