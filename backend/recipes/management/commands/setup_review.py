from django.core.management.base import BaseCommand
from django.contrib.auth import get_user_model
from recipes.models import Recipe, Tag, Ingredient, RecipeIngredient


User = get_user_model()


class Command(BaseCommand):
    help = '–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–µ–≤—å—é–µ—Ä–æ–º'

    def handle(self, *args, **options):
        self.stdout.write(
            self.style.SUCCESS('üöÄ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–µ–≤—å—é–µ—Ä–æ–º...')
        )
        self.stdout.write('=' * 50)

        self.create_review_user()
        self.stdout.write('')

        self.create_test_data()
        self.stdout.write('')

        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        self.stdout.write('üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:')
        self.stdout.write(f'   –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {User.objects.count()}')
        self.stdout.write(f'   –†–µ—Ü–µ–ø—Ç–æ–≤: {Recipe.objects.count()}')
        self.stdout.write(f'   –¢–µ–≥–æ–≤: {Tag.objects.count()}')
        self.stdout.write(f'   –ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤: {Ingredient.objects.count()}')

        self.stdout.write('')
        self.stdout.write(
            self.style.SUCCESS('‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!')
        )
        self.stdout.write('')
        self.stdout.write('üîë –î–∞–Ω–Ω—ã–µ –¥–ª—è –≤—Ö–æ–¥–∞ –≤ –∞–¥–º–∏–Ω–∫—É:')
        self.stdout.write('   –õ–æ–≥–∏–Ω: review')
        self.stdout.write('   –ü–∞—Ä–æ–ª—å: review1admin')
        self.stdout.write('   Email: review@admin.ru')

    def create_review_user(self):
        """–°–æ–∑–¥–∞–µ—Ç —Å—É–ø–µ—Ä–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —Ä–µ–≤—å—é–µ—Ä–∞."""
        try:
            if not User.objects.filter(username='review').exists():
                user = User.objects.create_superuser(
                    username='review',
                    email='review@admin.ru',
                    password='review1admin',
                    first_name='Review',
                    last_name='Admin'
                )
                self.stdout.write(
                    self.style.SUCCESS(f'‚úÖ –°–æ–∑–¥–∞–Ω —Å—É–ø–µ—Ä–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user.username}')
                )
            else:
                self.stdout.write('‚ÑπÔ∏è  –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å review —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç')
        except Exception as e:
            self.stdout.write(
                self.style.ERROR(f'‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}')
            )

    def create_test_data(self):
        """–°–æ–∑–¥–∞–µ—Ç —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ: —Ç–µ–≥–∏, –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ —Ä–µ—Ü–µ–ø—Ç—ã."""
        # –°–æ–∑–¥–∞–µ–º —Ç–µ–≥–∏
        tags_data = [
            {'name': '–ó–∞–≤—Ç—Ä–∞–∫', 'slug': 'breakfast'},
            {'name': '–û–±–µ–¥', 'slug': 'lunch'},
            {'name': '–£–∂–∏–Ω', 'slug': 'dinner'},
            {'name': '–î–µ—Å–µ—Ä—Ç', 'slug': 'dessert'},
            {'name': '–ù–∞–ø–∏—Ç–∫–∏', 'slug': 'drinks'},
        ]

        tags = {}
        for tag_data in tags_data:
            tag, created = Tag.objects.get_or_create(
                slug=tag_data['slug'],
                defaults={'name': tag_data['name']}
            )
            tags[tag.slug] = tag
            if created:
                self.stdout.write(f'‚úÖ –°–æ–∑–¥–∞–Ω —Ç–µ–≥: {tag.name}')

        # –°–æ–∑–¥–∞–µ–º –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã
        ingredients_data = [
            {'name': '–ú—É–∫–∞', 'measurement_unit': '–≥'},
            {'name': '–Ø–π—Ü–∞', 'measurement_unit': '—à—Ç'},
            {'name': '–ú–æ–ª–æ–∫–æ', 'measurement_unit': '–º–ª'},
            {'name': '–°–∞—Ö–∞—Ä', 'measurement_unit': '–≥'},
            {'name': '–°–ª–∏–≤–æ—á–Ω–æ–µ –º–∞—Å–ª–æ', 'measurement_unit': '–≥'},
            {'name': '–°–æ–ª—å', 'measurement_unit': '–≥'},
            {'name': '–ü–µ—Ä–µ—Ü', 'measurement_unit': '–≥'},
            {'name': '–ü–æ–º–∏–¥–æ—Ä—ã', 'measurement_unit': '—à—Ç'},
            {'name': '–û–≥—É—Ä—Ü—ã', 'measurement_unit': '—à—Ç'},
            {'name': '–õ—É–∫', 'measurement_unit': '—à—Ç'},
        ]

        ingredients = {}
        for ing_data in ingredients_data:
            ingredient, created = Ingredient.objects.get_or_create(
                name=ing_data['name'],
                defaults={'measurement_unit': ing_data['measurement_unit']}
            )
            ingredients[ingredient.name] = ingredient
            if created:
                self.stdout.write(f'‚úÖ –°–æ–∑–¥–∞–Ω –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç: {ingredient.name}')

        # –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        users_data = [
            {
                'username': 'chef_master',
                'email': 'chef@example.com',
                'first_name': '–®–µ—Ñ',
                'last_name': '–ú–∞—Å—Ç–µ—Ä'
            },
            {
                'username': 'home_cook',
                'email': 'home@example.com',
                'first_name': '–î–æ–º–∞—à–Ω–∏–π',
                'last_name': '–ü–æ–≤–∞—Ä'
            },
        ]

        users = {}
        for user_data in users_data:
            user, created = User.objects.get_or_create(
                username=user_data['username'],
                defaults={
                    'email': user_data['email'],
                    'first_name': user_data['first_name'],
                    'last_name': user_data['last_name'],
                }
            )
            if created:
                user.set_password('password123')
                user.save()
                self.stdout.write(f'‚úÖ –°–æ–∑–¥–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user.username}')
            users[user.username] = user

        # –†–µ—Ü–µ–ø—Ç—ã –¥–ª—è chef_master (4 —Ä–µ—Ü–µ–ø—Ç–∞)
        chef_recipes = [
            {
                'name': '–ë–ª–∏–Ω—ã –∫–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–µ',
                'text': ('–¢—Ä–∞–¥–∏—Ü–∏–æ–Ω–Ω—ã–µ —Ä—É—Å—Å–∫–∏–µ –±–ª–∏–Ω—ã –Ω–∞ –º–æ–ª–æ–∫–µ. '
                        '–ü–æ–¥–∞–≤–∞—Ç—å —Å –≤–∞—Ä–µ–Ω—å–µ–º –∏–ª–∏ —Å–º–µ—Ç–∞–Ω–æ–π.'),
                'cooking_time': 30,
                'tags': ['breakfast'],
                'ingredients': [
                    ('–ú—É–∫–∞', 200),
                    ('–Ø–π—Ü–∞', 2),
                    ('–ú–æ–ª–æ–∫–æ', 500),
                    ('–°–∞—Ö–∞—Ä', 30),
                    ('–°–æ–ª—å', 5),
                ]
            },
            {
                'name': '–û–º–ª–µ—Ç —Å –æ–≤–æ—â–∞–º–∏',
                'text': ('–ü—ã—à–Ω—ã–π –æ–º–ª–µ—Ç —Å –ø–æ–º–∏–¥–æ—Ä–∞–º–∏ –∏ –æ–≥—É—Ä—Ü–∞–º–∏. '
                        '–û—Ç–ª–∏—á–Ω—ã–π –∑–∞–≤—Ç—Ä–∞–∫.'),
                'cooking_time': 15,
                'tags': ['breakfast'],
                'ingredients': [
                    ('–Ø–π—Ü–∞', 3),
                    ('–ú–æ–ª–æ–∫–æ', 100),
                    ('–ü–æ–º–∏–¥–æ—Ä—ã', 2),
                    ('–û–≥—É—Ä—Ü—ã', 1),
                    ('–°–æ–ª—å', 3),
                ]
            },
            {
                'name': '–ü–∞—Å—Ç–∞ –ö–∞—Ä–±–æ–Ω–∞—Ä–∞',
                'text': '–ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∞—è –∏—Ç–∞–ª—å—è–Ω—Å–∫–∞—è –ø–∞—Å—Ç–∞ —Å –±–µ–∫–æ–Ω–æ–º –∏ —è–π—Ü–æ–º.',
                'cooking_time': 25,
                'tags': ['lunch', 'dinner'],
                'ingredients': [
                    ('–ú—É–∫–∞', 300),
                    ('–Ø–π—Ü–∞', 4),
                    ('–°–æ–ª—å', 5),
                    ('–ü–µ—Ä–µ—Ü', 3),
                ]
            },
            {
                'name': '–¢–∏—Ä–∞–º–∏—Å—É',
                'text': '–ò—Ç–∞–ª—å—è–Ω—Å–∫–∏–π –¥–µ—Å–µ—Ä—Ç —Å –∫–æ—Ñ–µ –∏ –º–∞—Å–∫–∞—Ä–ø–æ–Ω–µ.',
                'cooking_time': 60,
                'tags': ['dessert'],
                'ingredients': [
                    ('–Ø–π—Ü–∞', 6),
                    ('–°–∞—Ö–∞—Ä', 150),
                    ('–ú—É–∫–∞', 100),
                ]
            },
        ]

        # –†–µ—Ü–µ–ø—Ç—ã –¥–ª—è home_cook (3 —Ä–µ—Ü–µ–ø—Ç–∞)
        home_recipes = [
            {
                'name': '–°–∞–ª–∞—Ç –¶–µ–∑–∞—Ä—å',
                'text': ('–ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–π —Å–∞–ª–∞—Ç —Å –∫—É—Ä–∏—Ü–µ–π, —Å—É—Ö–∞—Ä–∏–∫–∞–º–∏ '
                        '–∏ —Å–æ—É—Å–æ–º –¶–µ–∑–∞—Ä—å.'),
                'cooking_time': 20,
                'tags': ['lunch'],
                'ingredients': [
                    ('–ü–æ–º–∏–¥–æ—Ä—ã', 3),
                    ('–û–≥—É—Ä—Ü—ã', 2),
                    ('–õ—É–∫', 1),
                    ('–°–æ–ª—å', 3),
                    ('–ü–µ—Ä–µ—Ü', 2),
                ]
            },
            {
                'name': '–ì—Ä–µ—á–µ—Å–∫–∏–π —Å–∞–ª–∞—Ç',
                'text': '–°–≤–µ–∂–∏–π —Å–∞–ª–∞—Ç —Å —Ñ–µ—Ç–æ–π, –æ–ª–∏–≤–∫–∞–º–∏ –∏ –æ–≤–æ—â–∞–º–∏.',
                'cooking_time': 15,
                'tags': ['lunch', 'dinner'],
                'ingredients': [
                    ('–ü–æ–º–∏–¥–æ—Ä—ã', 4),
                    ('–û–≥—É—Ä—Ü—ã', 2),
                    ('–õ—É–∫', 1),
                    ('–°–æ–ª—å', 3),
                ]
            },
            {
                'name': '–ì–æ—Ä—è—á–∏–π —à–æ–∫–æ–ª–∞–¥',
                'text': '–î–æ–º–∞—à–Ω–∏–π –≥–æ—Ä—è—á–∏–π —à–æ–∫–æ–ª–∞–¥ —Å –º–æ–ª–æ–∫–æ–º.',
                'cooking_time': 10,
                'tags': ['drinks'],
                'ingredients': [
                    ('–ú–æ–ª–æ–∫–æ', 300),
                    ('–°–∞—Ö–∞—Ä', 50),
                    ('–°–ª–∏–≤–æ—á–Ω–æ–µ –º–∞—Å–ª–æ', 20),
                ]
            },
        ]

        # –°–æ–∑–¥–∞–µ–º —Ä–µ—Ü–µ–ø—Ç—ã
        all_recipes = chef_recipes + home_recipes

        for i, recipe_data in enumerate(all_recipes, 1):
            author = users['chef_master'] if i <= 4 else users['home_cook']

            recipe, created = Recipe.objects.get_or_create(
                name=recipe_data['name'],
                author=author,
                defaults={
                    'text': recipe_data['text'],
                    'cooking_time': recipe_data['cooking_time'],
                }
            )

            if created:
                # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–≥–∏
                for tag_slug in recipe_data['tags']:
                    recipe.tags.add(tags[tag_slug])

                # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã
                for ing_name, amount in recipe_data['ingredients']:
                    if ing_name in ingredients:
                        RecipeIngredient.objects.create(
                            recipe=recipe,
                            ingredient=ingredients[ing_name],
                            amount=amount
                        )

                self.stdout.write(
                    f'‚úÖ –°–æ–∑–¥–∞–Ω —Ä–µ—Ü–µ–ø—Ç: {recipe.name} '
                    f'(–∞–≤—Ç–æ—Ä: {recipe.author.username})'
                )
            else:
                self.stdout.write(f'‚ÑπÔ∏è  –†–µ—Ü–µ–ø—Ç —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {recipe.name}') 